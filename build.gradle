plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'com.github.johnrengelman.shadow' version '7.0.0'
	id 'maven-publish'
	id 'java'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	// jcenter()
	maven {
      name 'm2-dv8tion'
      url 'https://m2.dv8tion.net/releases'
    }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
	// implementation include ("net.dv8tion:JDA:${project.jda_version}")
	implementation include("net.dv8tion:JDA:${project.jda_version}")
	// implementation include (files("deps/JDA-4.3.0_277-fabricCustom.jar"))

/*
	// ================= JDA Dependencies: ============================
	implementation include("com.google.code.findbugs:jsr305:3.0.2")
    implementation include("org.jetbrains:annotations:16.0.1")
    //Logger
    implementation include("org.slf4j:slf4j-api:1.7.25")
    //Web Connection Support
    implementation include("com.neovisionaries:nv-websocket-client:2.14")
    implementation include("com.squareup.okhttp3:okhttp:3.13.0")
	implementation include('com.squareup.okio:okio:2.2.2')
    //Opus library support
    implementation include("club.minnced:opus-java:1.1.0")
    //Collections Utility
    implementation include("org.apache.commons:commons-collections4:4.1")
    //we use this only together with opus-java
    // if that dependency is excluded it also doesn't need jna anymore
    // since jna is a transitive runtime dependency of opus-java we don't include it explicitly as dependency
    implementation include("net.java.dev.jna:jna:4.4.0")
    //General Utility
    implementation include("net.sf.trove4j:trove4j:3.0.3")
    implementation include("com.fasterxml.jackson.core:jackson-databind:2.10.1")
	implementation include(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.5.20')
	// =================================================================
	*/
}

shadowJar {
	configurations = [project.configurations.runtimeClasspath]
	
	dependencies {
		// exclude(dependency("com.mojang:minecraft:${project.minecraft_version}"))
		// exclude(dependency("net.fabricmc:yarn:${project.yarn_mappings}:v2"))
		// exclude(dependency("net.fabricmc:fabric-loader:${project.loader_version}"))
		// exclude(dependency("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"))
		// exclude(dependency(("net.dv8tion:JDA:${project.jda_version}")))
		// include(dependency(files("deps/JDA-4.3.0_277-withDependencies.jar")))
	}
}


processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}


tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 16
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
